import {
  loginUser,
  registerUser,
  confirmEmail,      
} from '../../services/auth.service';
import axios from '../../utils/axios';

const initialState = {
  user: null,
  token: localStorage.getItem('token') || '',
};

export default {
  namespaced: true,
  state: { ...initialState },

  getters: {
    isLoggedIn: (s) => Boolean(s.token),
    user:      (s) => s.user,
  },

  mutations: {
    setUserData(state, user) {
      state.user = user;
    },
    setToken(state, token) {
      state.token = token;
      localStorage.setItem('token', token);
    },
    logout(state) {
      state.user  = null;
      state.token = '';
      localStorage.removeItem('token');
    },
  },

  actions: {
    async login({ commit }, payload) {
      const { data } = await loginUser(payload);
      commit('setUserData', data.user);
      commit('setToken', data.token);
    },

    async registration({ commit }, payload) {
  try {
    const { data } = await registerUser(payload);

    if (data.user)  commit('setUserData', data.user);
    if (data.token) commit('setToken', data.token);

    return data; // <-- —â–æ–± –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –º—ñ–≥ –∑–Ω–∞—Ç–∏, —â–æ –≤—Å–µ –¥–æ–±—Ä–µ
  } catch (error) {
    //  –ü—Ä–æ–±—Ä–æ—Å –ø–æ–º–∏–ª–∫–∏ 
    console.error('–ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:', error);
    throw error;
  }
},

    /** üîπ  –ü–Ü–î–¢–í–ï–†–î–ñ–ï–ù–ù–Ø EMAIL  üîπ */
    async confirmEmail({ commit }, payload) {
      const { data } = await confirmEmail(payload);
      // –æ—á—ñ–∫—É—î–º–æ { user, token } –≤—ñ–¥ –±–µ–∫–µ–Ω–¥–∞
      commit('setUserData', data.user);
      commit('setToken',  data.token);
    },

    logout({ commit }) {
      commit('logout');
    },

    async fetchUser({ commit, state }) {
      if (!state.token) return;
      try {
        const { data } = await axios.get('/users/me');
        commit('setUserData', data.user);
      } catch (e) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', e);
        commit('logout');
      }
    },
  },
};


// import { loginUser, registerUser, confirmEmail } from '../../services/auth.service';
// import axios from '../../utils/axios'; // üëà –¥–ª—è –∑–∞–ø–∏—Ç—É –¥–æ /me

// const initialState = {
//   user: null,
//   token: localStorage.getItem('token') || '',
// };

// export default {
//   namespaced: true,
//   state: { ...initialState },
//   getters: {
//     isLoggedIn(state) {
//       return Boolean(state.token);
//     },
//     user: (state) => state.user,
//   },

//   mutations: {
//     setUserData(state, userData) {
//       state.user = userData;
//     },
//     setToken(state, token) {
//       state.token = token;
//       localStorage.setItem('token', token);
//     },
//     logout(state) {
//       state.user = null;
//       state.token = '';
//       localStorage.removeItem('token');
//     },
//   },
//   actions: {
//     async login({ commit }, payload) {
//       const { data } = await loginUser(payload);
//       const { user, token } = data;

//       commit('setUserData', user);
//       commit('setToken', token);
//     },

//     async registration({ commit }, payload) {
//       const { data } = await registerUser(payload);
//       const { user, token } = data;

//       commit('setUserData', user);
//       commit('setToken', token);
//     },

//     logout({ commit }) {
//       commit('logout');
//     },

//     async fetchUser({ commit, state }) {
//       if (!state.token) return;

//       try {
//         const { data } = await axios.get('/users/me'); // üëà —Ç–≤—ñ–π –µ–Ω–¥–ø–æ—ó–Ω—Ç
//         commit('setUserData', data.user);
//       } catch (error) {
//         console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', error);
//         commit('logout');
//       }
//     },
//   },
// };

