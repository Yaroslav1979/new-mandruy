const express = require('express');
const router = express.Router();
const { getPlaceById } = require('../controllers/placeController'); 
const multer = require('multer');
const Place = require('../models/Place');
const path = require('path');
const fs = require('fs');

// –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞–ø–∫—É uploads, —è–∫—â–æ —ó—ó –Ω–µ–º–∞—î
const uploadsDir = path.join(__dirname, '..', 'uploads');
if (!fs.existsSync(uploadsDir)) {
  fs.mkdirSync(uploadsDir);
}

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    cb(null, uploadsDir);
  },
  filename: function (req, file, cb) {
    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
    cb(null, uniqueSuffix + path.extname(file.originalname));
  }
});

const upload = multer({ storage, limits: { files: 10 } });
//---------------------------------------------------------------
//–¥–ª—è –æ–±—Ä—ñ–∑—É–≤–∞–Ω–Ω—è —Ñ–æ—Ç–æ: 
const sharp = require('sharp');
//---------------------------------------------------------------------
// –î–æ–¥–∞–≤–∞–Ω–Ω—è –º—ñ—Å—Ü—è
router.post('/', upload.array('images', 10), async (req, res) => {
  console.log('req.body:', req.body);
console.log('req.files:', req.files);
  try {
    const { title, descr, coordinate, region, city, categoryIds } = req.body;

    // –Ø–∫—â–æ —Ñ–∞–π–ª–∏ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ
    if (!req.files || req.files.length === 0) {
      return res.status(400).json({ error: '–ù–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∂–æ–¥–Ω–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è' });
    }

    // const imgUrls = req.files.map(file => '/uploads/' + file.filename);
    const imgUrls = [];

    for (const file of req.files) {
      const inputPath = file.path; // –∞–±—Å–æ–ª—é—Ç–Ω–∏–π —à–ª—è—Ö
      const outputFilename = 'resized-' + file.filename;
      const outputPath = path.join(uploadsDir, outputFilename);

      // –ú–∞—Å—à—Ç–∞–±—É—î–º–æ —Ñ–æ—Ç–æ
      await sharp(inputPath)
        .resize(650, 400, {
          fit: sharp.fit.cover, // –∑–∞–ø–æ–≤–Ω–∏—Ç–∏ —Ä–æ–∑–º—ñ—Ä, –æ–±—Ä—ñ–∑–∞—é—á–∏ –∑–∞–π–≤–µ
          position: sharp.strategy.entropy}) // –æ–±—Ä—ñ–∑–∞—Ç–∏ –∑ –Ω–µ—ñ–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ—ó —á–∞—Å—Ç–∏–Ω–∏
        .jpeg({ quality: 60 }) // –Ω–æ–≤–∏–π —Ä–æ–∑–º—ñ—Ä —Ñ–æ—Ç–æ - 60% –úB –≤—ñ–¥ –æ—Ä–∏–≥—ñ–Ω–∞–ª—É
        .toFile(outputPath);

      // –î–æ–¥–∞—î–º–æ –¥–æ –º–∞—Å–∏–≤—É –≤—ñ–¥–Ω–æ—Å–Ω–∏–π —à–ª—è—Ö (–¥–ª—è –∫–ª—ñ—î–Ω—Ç–∞)
      imgUrls.push('/uploads/' + outputFilename);

      // –ó–∞ –±–∞–∂–∞–Ω–Ω—è–º ‚Äî –º–æ–∂–µ—à –≤–∏–¥–∞–ª–∏—Ç–∏ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π —Ñ–∞–π–ª:
      fs.unlinkSync(inputPath);
    }

    const newPlace = new Place({
      title,
      descr,
      location: {
        region,
        city,
        coordinate,
      },
      imgUrls,
      categoryIds: Array.isArray(categoryIds)
        ? categoryIds
        : JSON.parse(categoryIds) // —è–∫—â–æ –Ω–∞–¥—Ö–æ–¥–∏—Ç—å —è–∫ —Ä—è–¥–æ–∫
    });

    await newPlace.save();
    res.status(201).json(newPlace);
  } catch (err) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –º—ñ—Å—Ü—è:', err);
    res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –º—ñ—Å—Ü—è' });
  }
});
//--------------------------------------------------------------------
// GET /api/places ‚Äî –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –º—ñ—Å—Ü—è
router.get("/", async (req, res) => {
  try {
    const places = await Place.find().sort({ createdAt: -1 });
    res.json(places);
  } catch (err) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –º—ñ—Å—Ü—å:", err);
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});
//---------------------------------------------------------------------
// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –º—ñ—Å—Ü—è –∑–∞ id
// router.get('/places/:id', async (req, res) => {
//   console.log("üîç –û—Ç—Ä–∏–º—É—é –º—ñ—Å—Ü–µ –∑ id:", req.params.id);
//   try {
//     const place = await Place.findById(req.params.id);
//     if (!place) {
//       console.log("‚ö†Ô∏è –ú—ñ—Å—Ü–µ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
//       return res.status(404).json({ error: '–ú—ñ—Å—Ü–µ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' });
//     }
//     res.json(place);
//   } catch (err) {
//     console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –º—ñ—Å—Ü—è –∑–∞ id:', err);
//     res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
//   }
// });
router.get('/:_id', getPlaceById);
module.exports = router;